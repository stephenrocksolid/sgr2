# Generated by Django 5.0.2 on 2025-08-20 19:39

import django.db.models.deletion
import django.db.models.functions.text
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Engine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('engine_make', models.CharField(max_length=100)),
                ('engine_model', models.CharField(max_length=100)),
                ('sg_engine_identifier', models.CharField(blank=True, max_length=100)),
                ('sg_engine_notes', models.TextField(blank=True)),
                ('cpl_number', models.CharField(blank=True, max_length=50)),
                ('ar_number', models.CharField(blank=True, max_length=50)),
                ('build_list', models.CharField(blank=True, max_length=100)),
                ('engine_code', models.CharField(blank=True, max_length=50)),
                ('crankshaft_no', models.CharField(blank=True, max_length=50)),
                ('piston_no', models.CharField(blank=True, max_length=50)),
                ('piston_marked_no', models.CharField(blank=True, max_length=50)),
                ('piston_notes', models.TextField(blank=True)),
                ('oh_kit_no', models.CharField(blank=True, max_length=50)),
                ('cylinder', models.PositiveIntegerField(blank=True, null=True)),
                ('valves_per_cyl', models.PositiveIntegerField(blank=True, null=True)),
                ('bore_stroke', models.CharField(blank=True, max_length=50)),
                ('compression_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('firing_order', models.CharField(blank=True, max_length=50)),
                ('overview_comments', models.TextField(blank=True)),
                ('interference', models.CharField(blank=True, max_length=100)),
                ('camshaft', models.CharField(blank=True, max_length=100)),
                ('valve_adjustment', models.CharField(blank=True, max_length=100)),
                ('rod_journal_diameter', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('main_journal_diameter_pos1', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('main_journal_diameter_1', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('big_end_housing_bore', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('status', models.CharField(blank=True, max_length=100)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EnginePart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('engine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.engine')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('year', models.PositiveIntegerField()),
                ('machine_type', models.CharField(max_length=100)),
                ('market_type', models.CharField(max_length=100)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MachineEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('engine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.engine')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.machine')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='machine',
            name='engines',
            field=models.ManyToManyField(through='inventory.MachineEngine', to='inventory.engine'),
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('part_number', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=200)),
                ('category', models.CharField(blank=True, max_length=100)),
                ('manufacturer', models.CharField(blank=True, max_length=100)),
                ('unit', models.CharField(blank=True, max_length=50)),
                ('type', models.CharField(blank=True, max_length=100)),
                ('manufacturer_type', models.CharField(blank=True, max_length=100)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('engines', models.ManyToManyField(through='inventory.EnginePart', to='inventory.engine')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='enginepart',
            name='part',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.part'),
        ),
        migrations.CreateModel(
            name='SGEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sg_make', models.CharField(max_length=100)),
                ('sg_model', models.CharField(max_length=100)),
                ('identifier', models.CharField(max_length=100, unique=True)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='engine',
            name='sg_engine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.sgengine'),
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('contact_name', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PartVendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vendor_sku', models.CharField(blank=True, max_length=100)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('stock_qty', models.PositiveIntegerField(default=0)),
                ('lead_time_days', models.PositiveIntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.part')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.vendor')),
            ],
        ),
        migrations.AddField(
            model_name='part',
            name='preferred_vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_parts', to='inventory.vendor'),
        ),
        migrations.AddField(
            model_name='part',
            name='vendors',
            field=models.ManyToManyField(related_name='supplied_parts', through='inventory.PartVendor', to='inventory.vendor'),
        ),
        migrations.AddConstraint(
            model_name='machineengine',
            constraint=models.UniqueConstraint(fields=('machine', 'engine'), name='unique_machine_engine', violation_error_message='This machine-engine combination already exists.'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(django.db.models.functions.text.Lower('make'), name='machine_make_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(django.db.models.functions.text.Lower('model'), name='machine_model_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(django.db.models.functions.text.Lower('machine_type'), name='machine_type_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(django.db.models.functions.text.Lower('market_type'), name='machine_market_type_lower_idx'),
        ),
        migrations.AddConstraint(
            model_name='machine',
            constraint=models.UniqueConstraint(fields=('make', 'model', 'year', 'machine_type', 'market_type'), name='unique_machine_key', violation_error_message='Machine with this combination already exists.'),
        ),
        migrations.AddConstraint(
            model_name='enginepart',
            constraint=models.UniqueConstraint(fields=('engine', 'part'), name='unique_engine_part', violation_error_message='This engine-part combination already exists.'),
        ),
        migrations.AddIndex(
            model_name='sgengine',
            index=models.Index(django.db.models.functions.text.Lower('sg_make'), name='sg_engine_make_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='sgengine',
            index=models.Index(django.db.models.functions.text.Lower('sg_model'), name='sg_engine_model_lower_idx'),
        ),
        migrations.AddConstraint(
            model_name='sgengine',
            constraint=models.UniqueConstraint(fields=('sg_make', 'sg_model'), name='unique_sg_engine_make_model', violation_error_message='SG Engine with this make and model already exists.'),
        ),
        migrations.AddIndex(
            model_name='engine',
            index=models.Index(django.db.models.functions.text.Lower('engine_make'), name='engine_make_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='engine',
            index=models.Index(django.db.models.functions.text.Lower('engine_model'), name='engine_model_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='engine',
            index=models.Index(django.db.models.functions.text.Lower('cpl_number'), name='engine_cpl_number_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='vendor',
            index=models.Index(django.db.models.functions.text.Lower('name'), name='vendor_name_lower_idx'),
        ),
        migrations.AddConstraint(
            model_name='partvendor',
            constraint=models.UniqueConstraint(fields=('part', 'vendor'), name='unique_part_vendor', violation_error_message='This part-vendor combination already exists.'),
        ),
        migrations.AddIndex(
            model_name='part',
            index=models.Index(django.db.models.functions.text.Lower('part_number'), name='part_number_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='part',
            index=models.Index(django.db.models.functions.text.Lower('name'), name='part_name_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='part',
            index=models.Index(django.db.models.functions.text.Lower('manufacturer'), name='part_manufacturer_lower_idx'),
        ),
        migrations.AddIndex(
            model_name='part',
            index=models.Index(django.db.models.functions.text.Lower('category'), name='part_category_lower_idx'),
        ),
        migrations.AddConstraint(
            model_name='part',
            constraint=models.UniqueConstraint(fields=('part_number', 'name'), name='unique_part_number_name', violation_error_message='Part with this number and name already exists.'),
        ),
    ]
