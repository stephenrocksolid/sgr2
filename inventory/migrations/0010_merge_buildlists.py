# Generated by Django 5.0.2 on 2025-08-22 20:54

from django.db import migrations


def merge_buildlists_per_engine(apps, schema_editor):
    """
    Merge multiple BuildLists per Engine into a single one.
    - If 0 BuildLists → create "Default Build List"
    - If 1 → leave as is
    - If >1 → choose the oldest as primary; reassign all Kits; delete extras
    """
    Engine = apps.get_model('inventory', 'Engine')
    BuildList = apps.get_model('inventory', 'BuildList')
    Kit = apps.get_model('inventory', 'Kit')
    
    for engine in Engine.objects.all():
        build_lists = list(BuildList.objects.filter(engine=engine).order_by('created_at'))
        
        if len(build_lists) == 0:
            # Create default build list
            BuildList.objects.create(
                engine=engine,
                name='Default Build List',
                notes=''
            )
        elif len(build_lists) == 1:
            # Leave as is
            continue
        else:
            # Multiple build lists - merge them
            primary_bl = build_lists[0]  # oldest one
            
            # Collect notes from all build lists
            all_notes = []
            if primary_bl.notes.strip():
                all_notes.append(primary_bl.notes.strip())
            
            for bl in build_lists[1:]:
                if bl.notes.strip():
                    all_notes.append(f"{bl.notes.strip()} (merged)")
                
                # Move all kits from this build list to the primary one
                Kit.objects.filter(build_list=bl).update(build_list=primary_bl)
                
                # Delete the extra build list
                bl.delete()
            
            # Update primary build list notes
            if all_notes:
                primary_bl.notes = '\n\n'.join(all_notes)
                primary_bl.save()


def reverse_merge_buildlists(apps, schema_editor):
    """
    Reverse migration - not implemented as it would be complex to restore
    the original multiple build lists structure.
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0009_add_build_lists'),
    ]

    operations = [
        migrations.RunPython(merge_buildlists_per_engine, reverse_merge_buildlists),
    ]
