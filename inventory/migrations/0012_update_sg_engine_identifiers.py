# Generated by Django 5.0.2 on 2025-08-22 23:49

from django.db import migrations


def update_sg_engine_identifiers(apps, schema_editor):
    """Update sg_engine_identifier for all Engine records that have an sg_engine but missing identifier."""
    Engine = apps.get_model('inventory', 'Engine')
    
    # Find all Engine records that have an sg_engine but empty sg_engine_identifier
    engines_to_update = Engine.objects.filter(
        sg_engine__isnull=False,
        sg_engine_identifier__isnull=True
    ) | Engine.objects.filter(
        sg_engine__isnull=False,
        sg_engine_identifier=''
    )
    
    # Update each engine with its sg_engine's identifier
    for engine in engines_to_update:
        if engine.sg_engine and engine.sg_engine.identifier:
            engine.sg_engine_identifier = engine.sg_engine.identifier
            engine.save()


def reverse_update_sg_engine_identifiers(apps, schema_editor):
    """Reverse migration - clear sg_engine_identifier for all Engine records."""
    Engine = apps.get_model('inventory', 'Engine')
    
    # Clear sg_engine_identifier for all Engine records that have an sg_engine
    engines_to_clear = Engine.objects.filter(sg_engine__isnull=False)
    engines_to_clear.update(sg_engine_identifier='')


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0011_add_unique_buildlist_constraint'),
    ]

    operations = [
        migrations.RunPython(
            update_sg_engine_identifiers,
            reverse_update_sg_engine_identifiers
        ),
    ]
