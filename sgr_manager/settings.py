"""
Django settings for sgr_manager project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Environment variable helpers
def env(key, default=None):
    return os.getenv(key, default)


def env_bool(key, default=False):
    val = os.getenv(key, None)
    if val is None:
        return default
    return str(val).lower() in {"1", "true", "yes", "on"}


def env_csv(key, default_list):
    raw = os.getenv(key, None)
    if not raw:
        return default_list
    return [x.strip() for x in raw.split(",") if x.strip()]


# Optional: load .env in development if present
try:
    if os.path.exists(os.path.join(BASE_DIR, ".env")):
        from dotenv import load_dotenv  # type: ignore
        load_dotenv(os.path.join(BASE_DIR, ".env"))
    elif os.path.exists(".env"):
        # Also try current directory for .env file
        from dotenv import load_dotenv  # type: ignore
        load_dotenv(".env")
except Exception:
    # Don't fail if python-dotenv isn't installed in some environments
    pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", locals().get("SECRET_KEY", "dev-insecure-secret-key-change-me"))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool("DEBUG", True)

# ---- Hosts & security ----
ALLOWED_HOSTS = env_csv("ALLOWED_HOSTS", ["127.0.0.1", "localhost"])

# If you're using HTTPS on the domain, set CSRF trusted origins
# (Django requires full scheme here)
CSRF_TRUSTED_ORIGINS = os.getenv(
    "CSRF_TRUSTED_ORIGINS",
    "https://sgr.rocksoliddata.solutions"
).split(",")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Local apps
    'inventory',
    'imports',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sgr_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sgr_manager.wsgi.application'


def first_env(*keys, default=None):
    for k in keys:
        v = os.environ.get(k)
        if v not in (None, ""):
            return v
    return default

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": first_env("DB_NAME", "PGDATABASE", default="sgr_dev"),
        "USER": first_env("DB_USER", "PGUSER", default="sgr_user"),
        "PASSWORD": first_env("DB_PASSWORD", "PGPASSWORD", default="devpass"),
        "HOST": first_env("DB_HOST", "PGHOST", default="127.0.0.1"),
        "PORT": first_env("DB_PORT", "PGPORT", default="5432"),
        "CONN_MAX_AGE": int(first_env("DB_CONN_MAX_AGE", default="60")),
        "OPTIONS": {},
    }
}
DATABASES["default"]["ATOMIC_REQUESTS"] = True


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model (using default for now)
AUTH_USER_MODEL = 'auth.User'

# Authentication settings
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/inventory/machines/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

# Celery Configuration
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://127.0.0.1:6379/1")
CELERY_TASK_TIME_LIMIT = int(os.getenv("CELERY_TASK_TIME_LIMIT", "1800"))
CELERY_TASK_SOFT_TIME_LIMIT = int(os.getenv("CELERY_TASK_SOFT_TIME_LIMIT", "1500"))
CELERY_TASK_IGNORE_RESULT = False
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# Legacy compatibility - check if Redis is available
CELERY_ENABLED = True
try:
    import redis
    redis_client = redis.Redis.from_url(CELERY_BROKER_URL)
    redis_client.ping()
except (ImportError, redis.ConnectionError, redis.TimeoutError):
    # Fallback to memory broker for development
    CELERY_ENABLED = False
    CELERY_BROKER_URL = 'memory://'
    CELERY_RESULT_BACKEND = 'rpc://'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
